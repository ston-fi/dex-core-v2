;; messages from admin

(int) handle_admin_messages() impure inline {
    slice in_msg_body = ctx.at(BODY);

    if ctx.at(OPCODE) == op::set_fees { 
        ;; -> Router -> Pool
        throw_unless(error::insufficient_gas, ctx.at(MSG_VALUE) > ctx.at(FWD_FEE) * 2 
            + storage_fee::router + gas::router::set_fees 
            + storage_fee::pool + gas::pool::set_fees);

        int new_lp_fee = in_msg_body~load_uint16(); 
        int new_protocol_fee = in_msg_body~load_uint16(); 
        slice new_protocol_fee_address = in_msg_body~load_msg_addr();
        slice jetton_info = in_msg_body~load_slice_ref();
        slice jetton_wallet0 = jetton_info~load_msg_addr();
        slice jetton_wallet1 = jetton_info~load_msg_addr();
        slice excesses_recipient = get_excesses_address(jetton_info~load_msg_addr());
        jetton_info.end_parse();
        in_msg_body.end_parse();

        throw_unless(error::wrong_workchain, jetton_wallet1.address::check_workchain(params::workchain) 
            & jetton_wallet0.address::check_workchain(params::workchain) 
            & new_protocol_fee_address.address::check_workchain(params::workchain)
            & excesses_recipient.address::check_workchain(params::workchain));

        throw_unless(error::fee_out_range, 
            (params::min_fee  <= new_protocol_fee) & 
            (new_protocol_fee <= params::max_fee));
        throw_unless(error::fee_out_range, 
            (params::min_fee  <= new_lp_fee) & 
            (new_lp_fee <= params::max_fee));
        
        var pool = contracts::from_sources(
            pool_idata(my_address(), jetton_wallet0, jetton_wallet1, storage::jetton_lp_wallet_code,  storage::lp_account_code),
            storage::pool_code
        );

        reserves::max_balance(storage_fee::router);
        msgs::send_with_stateinit(
            0, 
            pool~address(params::workchain), 
            pool~state_init(), 
            pool::internal_set_fees(
                new_lp_fee, 
                new_protocol_fee, 
                new_protocol_fee_address,
                excesses_recipient
            ), 
            CARRY_ALL_BALANCE
        );
        return (true);
    }

    if ctx.at(OPCODE) == op::reset_pool_gas { 
        ;; -> Router -> Pool ->
        throw_unless(error::insufficient_gas, ctx.at(MSG_VALUE) > ctx.at(FWD_FEE) * 3 
            + storage_fee::router + gas::router::reset_pool_gas  
            + storage_fee::pool + gas::pool::reset_gas);

        slice jetton_wallet0 = in_msg_body~load_msg_addr();
        slice jetton_wallet1 = in_msg_body~load_msg_addr();
        slice excesses_recipient = get_excesses_address(in_msg_body~load_msg_addr());
        in_msg_body.end_parse();

        throw_unless(error::wrong_workchain, jetton_wallet1.address::check_workchain(params::workchain)
            & jetton_wallet0.address::check_workchain(params::workchain)
            & excesses_recipient.address::check_workchain(params::workchain));

        var pool = contracts::from_sources(
            pool_idata(my_address(), jetton_wallet0, jetton_wallet1, storage::jetton_lp_wallet_code,  storage::lp_account_code),
            storage::pool_code
        );

        reserves::max_balance(storage_fee::router);
        msgs::send_with_stateinit(
            0, 
            pool~address(params::workchain), 
            pool~state_init(), 
            pool::reset_gas(excesses_recipient), 
            CARRY_ALL_BALANCE
        );
        return (true);
    }

    if ctx.at(OPCODE) == op::update_pool_status { 
        ;; -> Router -> Pool
        throw_unless(error::insufficient_gas, ctx.at(MSG_VALUE) > ctx.at(FWD_FEE) * 2 
            + storage_fee::router + gas::router::update_pool_status
            + storage_fee::pool + gas::pool::internal_update_status);

        slice jetton_wallet0 = in_msg_body~load_msg_addr();
        slice jetton_wallet1 = in_msg_body~load_msg_addr();
        slice excesses_recipient = get_excesses_address(in_msg_body~load_msg_addr());
        in_msg_body.end_parse();

        throw_unless(error::wrong_workchain, jetton_wallet1.address::check_workchain(params::workchain) 
            & jetton_wallet0.address::check_workchain(params::workchain)
            & excesses_recipient.address::check_workchain(params::workchain));

        var pool = contracts::from_sources(
            pool_idata(my_address(), jetton_wallet0, jetton_wallet1, storage::jetton_lp_wallet_code, storage::lp_account_code),
            storage::pool_code
        );
        
        reserves::max_balance(storage_fee::router);
        msgs::send_with_stateinit(
            0, 
            pool~address(params::workchain), 
            pool~state_init(), 
            pool::internal_update_status(excesses_recipient), 
            CARRY_ALL_BALANCE
        );
        return (true);
    }

    if ctx.at(OPCODE) == op::update_pool_code { 
        ;; -> Router -> Pool
        throw_unless(error::insufficient_gas, ctx.at(MSG_VALUE) > ctx.at(FWD_FEE) * 2 
            + storage_fee::router + gas::router::update_pool_code
            + storage_fee::pool + gas::pool::internal_update_pool_code);

        slice jetton_wallet0 = in_msg_body~load_msg_addr();
        slice jetton_wallet1 = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();

        throw_if(error::empty_cell, storage::upgrade_pool_code.cell::is_empty());

        throw_unless(error::wrong_workchain, jetton_wallet1.address::check_workchain(params::workchain) 
            & jetton_wallet0.address::check_workchain(params::workchain));

        var pool = contracts::from_sources(
            pool_idata(my_address(), jetton_wallet0, jetton_wallet1, storage::jetton_lp_wallet_code, storage::lp_account_code),
            storage::pool_code
        );
        
        reserves::max_balance(storage_fee::router);
        msgs::send_with_stateinit(
            0, 
            pool~address(params::workchain), 
            pool~state_init(), 
            pool::internal_update_pool_code(storage::upgrade_pool_code), 
            CARRY_ALL_BALANCE
        );
        return (true);
    }

    if ctx.at(OPCODE) == op::update_status { 
        storage::is_locked = storage::is_locked ? false : true; 
        storage::save();
        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }
    
    if ctx.at(OPCODE) == op::init_code_upgrade { 
        (int end_code, _, int end_admin, slice admin, int end_pool_code, cell pool_code) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, end_code == 0); ;; upgrade already in progress
        cell new_code = in_msg_body~load_ref();
        throw_if(error::empty_cell, new_code.cell::is_empty());
        storage::temp_upgrade = pack_temp_upgrade(now() + params::sevendays, new_code, end_admin, admin, end_pool_code, pool_code);
        in_msg_body.end_parse();

        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    if ctx.at(OPCODE) == op::init_admin_upgrade { 
        (int end_code, cell new_code, int end_admin, _, int end_pool_code, cell pool_code) = unpack_temp_upgrade(storage::temp_upgrade);
        slice new_admin_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();

        throw_unless(error::invalid_call, end_admin == 0); ;; upgrade already in progress
        throw_unless(error::wrong_workchain, new_admin_address.address::check_workchain(params::workchain)); 
        storage::temp_upgrade = pack_temp_upgrade(end_code, new_code, now() + params::twodays, new_admin_address, end_pool_code, pool_code);
        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    if ctx.at(OPCODE) == op::init_pool_code_upgrade { 
        (int end_code, cell new_code, int end_admin, slice admin, int end_pool_code, _) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, end_pool_code == 0); ;; upgrade already in progress
        cell new_pool_code = in_msg_body~load_ref();
        throw_if(error::empty_cell, new_pool_code.cell::is_empty());
        storage::temp_upgrade = pack_temp_upgrade(end_code, new_code, end_admin, admin, now() + params::twodays, new_pool_code);
        in_msg_body.end_parse();

        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }
    
    if ctx.at(OPCODE) == op::cancel_pool_code_upgrade { 
        (int end_code, cell code, int end_admin, slice admin, int end_pool_code, _) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, end_pool_code > 0); 
        storage::temp_upgrade = pack_temp_upgrade(end_code, code, end_admin, admin, 0, empty_cell());
        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    if ctx.at(OPCODE) == op::cancel_admin_upgrade { 
        (int end_code, cell code, int end_admin, _, int end_pool_code, cell pool_code) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, end_admin > 0); 
        storage::temp_upgrade = pack_temp_upgrade(end_code, code, 0, addr_none(), end_pool_code, pool_code);
        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    if ctx.at(OPCODE) == op::cancel_code_upgrade { 
        (int end_code, _, int end_admin, slice admin, int end_pool_code, cell pool_code) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, end_code > 0); 
        storage::temp_upgrade = pack_temp_upgrade(0, empty_cell(), end_admin, admin, end_pool_code, pool_code);
        storage::save();

        reserves::max_balance(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    ;; valid for both upgrades
    if ctx.at(OPCODE) == op::finalize_upgrades { 
        (int end_code, cell new_code, int end_admin, slice new_admin, int end_pool_code, cell pool_code) = unpack_temp_upgrade(storage::temp_upgrade);
        throw_unless(error::invalid_call, (end_code + end_admin + end_pool_code) > 0); ;; make sure at least one upgrade process is in progress

        if (end_code > 0) & (now() >= end_code) {
            set_code(new_code);
            end_code = 0;
            new_code = empty_cell();
        }

        if (end_admin > 0) & (now() >= end_admin) {
            storage::admin_address = new_admin;
            end_admin = 0;
            new_admin = addr_none();
        }

        if (end_pool_code > 0) & (now() >= end_pool_code) {
            storage::upgrade_pool_code = pool_code;
            end_pool_code = 0;
            pool_code = empty_cell();
        }

        storage::temp_upgrade = pack_temp_upgrade(end_code, new_code, end_admin, new_admin, end_pool_code, pool_code);
        storage::save();
        ;; do not send anything else here
        return (true);
    }

    if ctx.at(OPCODE) == op::reset_gas {
        reserves::exact(storage_fee::router);
        utils::send_excesses(0, storage::admin_address, QCARRY_ALL_BALANCE);
        return (true);
    }

    <%
    if (renderRouterAdminExtCalls) {
        print(`if handle_ext_admin_messages() { return (true); }`);
    }
    %>

    return (false);
}